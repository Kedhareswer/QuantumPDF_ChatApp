"use client"

import type React from "react"

import { useState, useRef, useCallback } from "react"
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Progress } from "@/components/ui/progress"
import { Textarea } from "@/components/ui/textarea"
import { Badge } from "@/components/ui/badge"
import { AlertCircle, FileText, Upload, X, CheckCircle, AlertTriangle } from "lucide-react"
import { AdvancedPDFProcessor, type ProcessingProgress } from "@/lib/pdf-processor-advanced"

interface PDFProcessorRealProps {
  onDocumentProcessed: (document: any) => void
  isProcessing: boolean
  setIsProcessing: (isProcessing: boolean) => void
}

export function PDFProcessorReal({ onDocumentProcessed, isProcessing, setIsProcessing }: PDFProcessorRealProps) {
  const [file, setFile] = useState<File | null>(null)
  const [manualText, setManualText] = useState("")
  const [error, setError] = useState<string | null>(null)
  const [progress, setProgress] = useState<ProcessingProgress | null>(null)
  const [processingMethod, setProcessingMethod] = useState<string | null>(null)
  const [processingStats, setProcessingStats] = useState<any>(null)
  const fileInputRef = useRef<HTMLInputElement>(null)
  const pdfProcessor = useRef<AdvancedPDFProcessor>(new AdvancedPDFProcessor())

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFile = e.target.files?.[0]
    if (selectedFile) {
      if (selectedFile.type !== "application/pdf") {
        setError("Please select a PDF file")
        setFile(null)
        return
      }

      if (selectedFile.size > 50 * 1024 * 1024) {
        setError("File size exceeds 50MB limit")
        setFile(null)
        return
      }

      setFile(selectedFile)
      setError(null)
      setProgress(null)
      setProcessingStats(null)
    }
  }

  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault()
    e.stopPropagation()

    if (e.dataTransfer.files?.length) {
      const droppedFile = e.dataTransfer.files[0]
      if (droppedFile.type !== "application/pdf") {
        setError("Please drop a PDF file")
        return
      }

      if (droppedFile.size > 50 * 1024 * 1024) {
        setError("File size exceeds 50MB limit")
        return
      }

      setFile(droppedFile)
      setError(null)
      setProgress(null)
      setProcessingStats(null)
    }
  }

  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault()
    e.stopPropagation()
  }

  const handleRemoveFile = () => {
    setFile(null)
    setError(null)
    setProgress(null)
    setProcessingStats(null)
    if (fileInputRef.current) {
      fileInputRef.current.value = ""
    }
  }

  const handleProcessFile = async () => {
    if (!file) {
      setError("Please select a PDF file")
      return
    }

    setIsProcessing(true)
    setError(null)
    setProgress({ stage: "Starting PDF processing...", progress: 0 })

    try {
      const result = await pdfProcessor.current.processFile(file, (progressUpdate) => {
        setProgress(progressUpdate)
        if (progressUpdate.method) {
          setProcessingMethod(progressUpdate.method)
        }
      })

      // Create document object
      const document = {
        id: Date.now().toString(),
        name: file.name,
        content: result.text,
        chunks: result.chunks,
        embeddings: [], // Will be generated by RAG engine
        uploadedAt: new Date(),
        metadata: {
          ...result.metadata,
          fileSize: file.size,
          processingTime: result.metadata.processingTime,
          extractionQuality: result.metadata.extractionQuality,
        },
      }

      setProcessingStats({
        pages: result.metadata.pages,
        successfulPages: result.metadata.successfulPages || 0,
        failedPages: result.metadata.failedPages || 0,
        processingTime: result.metadata.processingTime,
        extractionQuality: result.metadata.extractionQuality,
        chunks: result.chunks.length,
      })

      onDocumentProcessed(document)
    } catch (error) {
      console.error("Error processing PDF:", error)
      setError(`Failed to process PDF: ${error instanceof Error ? error.message : "Unknown error"}`)
    } finally {
      setIsProcessing(false)
      setProgress({ stage: "Processing complete", progress: 100 })
    }
  }

  const handleManualSubmit = () => {
    if (!manualText.trim()) {
      setError("Please enter some text")
      return
    }

    setIsProcessing(true)
    setError(null)

    try {
      // Create chunks from manual text
      const chunks = manualText
        .split("\n\n")
        .filter((chunk) => chunk.trim().length > 0)
        .map((chunk) => chunk.trim())

      // Create document object
      const document = {
        id: Date.now().toString(),
        name: `Manual Entry ${new Date().toLocaleString()}`,
        content: manualText,
        chunks: chunks.length > 0 ? chunks : [manualText],
        embeddings: [], // Will be generated by RAG engine
        uploadedAt: new Date(),
        metadata: {
          title: `Manual Entry ${new Date().toLocaleString()}`,
          author: "User",
          pages: 1,
          processingMethod: "Manual Entry",
          extractionQuality: "high" as const,
          fileSize: new Blob([manualText]).size,
          processingTime: 0,
          successfulPages: 1,
          failedPages: 0,
        },
      }

      onDocumentProcessed(document)
      setManualText("")
    } catch (error) {
      console.error("Error processing manual text:", error)
      setError(`Failed to process text: ${error instanceof Error ? error.message : "Unknown error"}`)
    } finally {
      setIsProcessing(false)
    }
  }

  const getProgressColor = useCallback(() => {
    if (!progress) return "bg-gray-200"
    if (progress.progress < 30) return "bg-yellow-500"
    if (progress.progress < 70) return "bg-blue-500"
    return "bg-green-500"
  }, [progress])

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* PDF Upload Card */}
        <Card className="border-2 border-black shadow-none">
          <CardHeader className="border-b border-black">
            <CardTitle className="text-sm flex items-center space-x-2">
              <FileText className="w-4 h-4" />
              <span>PDF UPLOAD</span>
            </CardTitle>
          </CardHeader>
          <CardContent className="p-4">
            <div
              className={`border-2 ${
                error ? "border-red-500" : "border-gray-300"
              } border-dashed rounded-md p-6 text-center cursor-pointer hover:bg-gray-50 transition-colors`}
              onDrop={handleDrop}
              onDragOver={handleDragOver}
              onClick={() => fileInputRef.current?.click()}
            >
              <input
                type="file"
                ref={fileInputRef}
                onChange={handleFileChange}
                accept=".pdf"
                className="hidden"
                disabled={isProcessing}
              />

              {file ? (
                <div className="flex flex-col items-center">
                  <FileText className="w-8 h-8 text-black mb-2" />
                  <p className="text-sm font-medium">{file.name}</p>
                  <p className="text-xs text-gray-500 mt-1">{(file.size / 1024 / 1024).toFixed(2)} MB</p>
                  {!isProcessing && (
                    <Button
                      variant="outline"
                      size="sm"
                      className="mt-2"
                      onClick={(e) => {
                        e.stopPropagation()
                        handleRemoveFile()
                      }}
                    >
                      <X className="w-4 h-4 mr-1" /> Remove
                    </Button>
                  )}
                </div>
              ) : (
                <div className="flex flex-col items-center">
                  <Upload className="w-8 h-8 text-gray-400 mb-2" />
                  <p className="text-sm font-medium">Click or drag & drop to upload PDF</p>
                  <p className="text-xs text-gray-500 mt-1">PDF files up to 50MB</p>
                </div>
              )}
            </div>

            {error && (
              <div className="flex items-center text-red-500 text-sm mt-2">
                <AlertCircle className="w-4 h-4 mr-1" />
                {error}
              </div>
            )}

            {progress && (
              <div className="mt-4 space-y-2">
                <div className="flex justify-between text-xs">
                  <span>{progress.stage}</span>
                  <span>{Math.round(progress.progress)}%</span>
                </div>
                <Progress value={progress.progress} className={getProgressColor()} />
                {processingMethod && (
                  <div className="flex justify-end">
                    <Badge variant="outline" className="text-xs">
                      {processingMethod}
                    </Badge>
                  </div>
                )}
                {progress.details && <p className="text-xs text-gray-500">{progress.details}</p>}
              </div>
            )}

            {processingStats && (
              <div className="mt-4 border border-gray-200 rounded-md p-3 bg-gray-50 text-xs">
                <h4 className="font-medium mb-2">Processing Results:</h4>
                <div className="grid grid-cols-2 gap-2">
                  <div>Pages:</div>
                  <div className="font-medium">{processingStats.pages}</div>
                  <div>Successful:</div>
                  <div className="font-medium">{processingStats.successfulPages}</div>
                  <div>Failed:</div>
                  <div className="font-medium">{processingStats.failedPages}</div>
                  <div>Chunks:</div>
                  <div className="font-medium">{processingStats.chunks}</div>
                  <div>Quality:</div>
                  <div className="font-medium capitalize">{processingStats.extractionQuality}</div>
                  <div>Time:</div>
                  <div className="font-medium">{(processingStats.processingTime / 1000).toFixed(2)}s</div>
                </div>
              </div>
            )}
          </CardContent>
          <CardFooter className="border-t border-gray-200 p-4">
            <Button
              onClick={handleProcessFile}
              disabled={!file || isProcessing}
              className="w-full bg-black hover:bg-gray-800 text-white"
            >
              {isProcessing ? "Processing..." : "Process PDF"}
            </Button>
          </CardFooter>
        </Card>

        {/* Manual Text Entry Card */}
        <Card className="border-2 border-black shadow-none">
          <CardHeader className="border-b border-black">
            <CardTitle className="text-sm flex items-center space-x-2">
              <FileText className="w-4 h-4" />
              <span>MANUAL TEXT ENTRY</span>
            </CardTitle>
          </CardHeader>
          <CardContent className="p-4">
            <div className="space-y-4">
              <div>
                <p className="text-sm mb-2">Paste or type document text if PDF processing is not working:</p>
                <Textarea
                  placeholder="Enter document text here..."
                  className="min-h-[200px] border-2 border-gray-300"
                  value={manualText}
                  onChange={(e) => setManualText(e.target.value)}
                  disabled={isProcessing}
                />
              </div>
              <div className="flex items-center text-amber-600 text-xs">
                <AlertTriangle className="w-4 h-4 mr-1" />
                <span>Manual text will not preserve original PDF formatting</span>
              </div>
            </div>
          </CardContent>
          <CardFooter className="border-t border-gray-200 p-4">
            <Button
              onClick={handleManualSubmit}
              disabled={!manualText.trim() || isProcessing}
              variant="outline"
              className="w-full border-black text-black hover:bg-gray-100"
            >
              Submit Text
            </Button>
          </CardFooter>
        </Card>
      </div>

      <div className="text-xs text-gray-500">
        <p className="flex items-center">
          <CheckCircle className="w-3 h-3 mr-1 text-green-500" />
          PDF processing uses multiple methods to ensure reliable text extraction
        </p>
        <p className="flex items-center mt-1">
          <CheckCircle className="w-3 h-3 mr-1 text-green-500" />
          For best results, use text-based PDFs rather than scanned documents
        </p>
      </div>
    </div>
  )
}
