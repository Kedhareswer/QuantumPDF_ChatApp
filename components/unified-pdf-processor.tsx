"use client"

import type React from "react"

import { useState, useRef, useCallback } from "react"
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Progress } from "@/components/ui/progress"
import { Badge } from "@/components/ui/badge"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { AlertCircle, FileText, Upload, X, CheckCircle, AlertTriangle, RefreshCw, Info } from "lucide-react"
import { useAppStore } from "@/lib/store"
import { AdvancedPDFProcessor, type ProcessingProgress } from "@/lib/pdf-processor-advanced"

interface UnifiedPDFProcessorProps {
  onDocumentProcessed: (document: any) => void
}

export function UnifiedPDFProcessor({ onDocumentProcessed }: UnifiedPDFProcessorProps) {
  const { isProcessing, setIsProcessing, addError } = useAppStore()

  const [file, setFile] = useState<File | null>(null)
  const [error, setError] = useState<string | null>(null)
  const [progress, setProgress] = useState<ProcessingProgress | null>(null)
  const [processingMethod, setProcessingMethod] = useState<string | null>(null)
  const [processingStats, setProcessingStats] = useState<any>(null)
  const [retryCount, setRetryCount] = useState(0)

  const fileInputRef = useRef<HTMLInputElement>(null)
  const pdfProcessor = useRef<AdvancedPDFProcessor>(new AdvancedPDFProcessor())

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFile = e.target.files?.[0]
    if (selectedFile) {
      validateAndSetFile(selectedFile)
    }
  }

  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault()
    e.stopPropagation()

    if (e.dataTransfer.files?.length) {
      const droppedFile = e.dataTransfer.files[0]
      validateAndSetFile(droppedFile)
    }
  }

  const validateAndSetFile = (selectedFile: File) => {
    if (selectedFile.type !== "application/pdf") {
      setError("Please select a PDF file")
      setFile(null)
      addError({
        type: "error",
        title: "Invalid File Type",
        message: "Only PDF files are supported",
      })
      return
    }

    if (selectedFile.size > 50 * 1024 * 1024) {
      setError("File size exceeds 50MB limit")
      setFile(null)
      addError({
        type: "error",
        title: "File Too Large",
        message: "Please select a file smaller than 50MB",
      })
      return
    }

    setFile(selectedFile)
    setError(null)
    setProgress(null)
    setProcessingStats(null)
    setRetryCount(0)
  }

  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault()
    e.stopPropagation()
  }

  const handleRemoveFile = () => {
    setFile(null)
    setError(null)
    setProgress(null)
    setProcessingStats(null)
    setRetryCount(0)
    if (fileInputRef.current) {
      fileInputRef.current.value = ""
    }
  }

  const handleProcessFile = async () => {
    if (!file) {
      setError("Please select a PDF file")
      addError({
        type: "error",
        title: "No File Selected",
        message: "Please select a PDF file to process",
      })
      return
    }

    setIsProcessing(true)
    setError(null)
    setProgress({ stage: "Starting PDF processing...", progress: 0 })

    try {
      const result = await pdfProcessor.current.processFile(file, (progressUpdate) => {
        setProgress(progressUpdate)
        if (progressUpdate.method) {
          setProcessingMethod(progressUpdate.method)
        }
      })

      // Validate processing result
      if (!result.text || result.text.trim().length === 0) {
        throw new Error("No text content could be extracted from the PDF")
      }

      if (!result.chunks || result.chunks.length === 0) {
        throw new Error("No text chunks could be created from the PDF")
      }

      // Create document object
      const document = {
        id: Date.now().toString(),
        name: file.name,
        content: result.text,
        chunks: result.chunks,
        embeddings: [], // Will be generated by RAG engine
        uploadedAt: new Date(),
        metadata: {
          ...result.metadata,
          fileSize: file.size,
          processingTime: result.metadata.processingTime,
          extractionQuality: result.metadata.extractionQuality,
          processingMethod: result.metadata.processingMethod,
        },
      }

      setProcessingStats({
        pages: result.metadata.pages,
        successfulPages: result.metadata.successfulPages || 0,
        failedPages: result.metadata.failedPages || 0,
        processingTime: result.metadata.processingTime,
        extractionQuality: result.metadata.extractionQuality,
        chunks: result.chunks.length,
        method: result.metadata.processingMethod,
      })

      onDocumentProcessed(document)

      addError({
        type: "success",
        title: "Document Processed",
        message: `Successfully processed ${file.name} with ${result.chunks.length} chunks`,
      })

      // Clear file after successful processing
      handleRemoveFile()
    } catch (error) {
      console.error("Error processing PDF:", error)
      const errorMessage = error instanceof Error ? error.message : "Unknown error occurred"
      setError(`Failed to process PDF: ${errorMessage}`)

      addError({
        type: "error",
        title: "Processing Failed",
        message: errorMessage,
      })
    } finally {
      setIsProcessing(false)
      setProgress({ stage: "Processing complete", progress: 100 })
    }
  }

  const handleRetry = () => {
    if (file && retryCount < 3) {
      setRetryCount((prev) => prev + 1)
      setError(null)
      handleProcessFile()
    }
  }

  const getProgressColor = useCallback(() => {
    if (!progress) return "bg-gray-200"
    if (progress.progress < 30) return "bg-yellow-500"
    if (progress.progress < 70) return "bg-blue-500"
    return "bg-green-500"
  }, [progress])

  const getQualityBadgeColor = (quality: string) => {
    switch (quality) {
      case "high":
        return "border-green-600 text-green-600"
      case "medium":
        return "border-yellow-600 text-yellow-600"
      case "low":
        return "border-red-600 text-red-600"
      default:
        return "border-gray-600 text-gray-600"
    }
  }

  return (
    <div className="space-y-6">
      <Card className="border-2 border-black shadow-none">
        <CardHeader className="border-b border-black">
          <CardTitle className="text-sm flex items-center space-x-2">
            <FileText className="w-4 h-4" />
            <span>PDF DOCUMENT PROCESSOR</span>
          </CardTitle>
        </CardHeader>

        <CardContent className="p-4">
          {/* File Upload Area */}
          <div
            className={`border-2 ${
              error ? "border-red-500" : "border-gray-300"
            } border-dashed rounded-md p-6 text-center cursor-pointer hover:bg-gray-50 transition-colors`}
            onDrop={handleDrop}
            onDragOver={handleDragOver}
            onClick={() => !isProcessing && fileInputRef.current?.click()}
          >
            <input
              type="file"
              ref={fileInputRef}
              onChange={handleFileChange}
              accept=".pdf"
              className="hidden"
              disabled={isProcessing}
            />

            {file ? (
              <div className="flex flex-col items-center space-y-3">
                <FileText className="w-8 h-8 text-black" />
                <div className="text-center">
                  <p className="text-sm font-medium">{file.name}</p>
                  <p className="text-xs text-gray-500">{(file.size / 1024 / 1024).toFixed(2)} MB</p>
                </div>
                {!isProcessing && (
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={(e) => {
                      e.stopPropagation()
                      handleRemoveFile()
                    }}
                    className="border-red-500 text-red-500 hover:bg-red-500 hover:text-white"
                  >
                    <X className="w-4 h-4 mr-1" /> Remove
                  </Button>
                )}
              </div>
            ) : (
              <div className="flex flex-col items-center space-y-3">
                <Upload className="w-8 h-8 text-gray-400" />
                <div className="text-center">
                  <p className="text-sm font-medium">Click or drag & drop to upload PDF</p>
                  <p className="text-xs text-gray-500 mt-1">PDF files up to 50MB</p>
                </div>
              </div>
            )}
          </div>

          {/* Error Display */}
          {error && (
            <Alert className="mt-4" variant="destructive">
              <AlertCircle className="h-4 w-4" />
              <AlertDescription className="flex items-center justify-between">
                <span>{error}</span>
                {file && retryCount < 3 && (
                  <Button size="sm" variant="outline" onClick={handleRetry}>
                    <RefreshCw className="w-3 h-3 mr-1" />
                    Retry ({retryCount + 1}/3)
                  </Button>
                )}
              </AlertDescription>
            </Alert>
          )}

          {/* Processing Progress */}
          {progress && isProcessing && (
            <div className="mt-4 space-y-3">
              <div className="flex justify-between text-xs">
                <span>{progress.stage}</span>
                <span>{Math.round(progress.progress)}%</span>
              </div>
              <Progress value={progress.progress} className={getProgressColor()} />

              <div className="flex items-center justify-between">
                {processingMethod && (
                  <Badge variant="outline" className="text-xs">
                    Method: {processingMethod}
                  </Badge>
                )}
                {retryCount > 0 && (
                  <Badge variant="outline" className="text-xs border-yellow-600 text-yellow-600">
                    Attempt {retryCount + 1}
                  </Badge>
                )}
              </div>

              {progress.details && <p className="text-xs text-gray-500">{progress.details}</p>}
            </div>
          )}

          {/* Processing Results */}
          {processingStats && !isProcessing && (
            <div className="mt-4 border border-gray-200 rounded-md p-4 bg-gray-50">
              <h4 className="font-medium mb-3 flex items-center">
                <CheckCircle className="w-4 h-4 mr-2 text-green-600" />
                Processing Results
              </h4>
              <div className="grid grid-cols-2 gap-3 text-xs">
                <div className="flex justify-between">
                  <span>Pages:</span>
                  <span className="font-medium">{processingStats.pages}</span>
                </div>
                <div className="flex justify-between">
                  <span>Successful:</span>
                  <span className="font-medium text-green-600">{processingStats.successfulPages}</span>
                </div>
                <div className="flex justify-between">
                  <span>Failed:</span>
                  <span className="font-medium text-red-600">{processingStats.failedPages}</span>
                </div>
                <div className="flex justify-between">
                  <span>Chunks:</span>
                  <span className="font-medium">{processingStats.chunks}</span>
                </div>
                <div className="flex justify-between">
                  <span>Quality:</span>
                  <Badge
                    variant="outline"
                    className={`text-xs ${getQualityBadgeColor(processingStats.extractionQuality)}`}
                  >
                    {processingStats.extractionQuality}
                  </Badge>
                </div>
                <div className="flex justify-between">
                  <span>Time:</span>
                  <span className="font-medium">{(processingStats.processingTime / 1000).toFixed(2)}s</span>
                </div>
                <div className="flex justify-between col-span-2">
                  <span>Method:</span>
                  <span className="font-medium">{processingStats.method}</span>
                </div>
              </div>
            </div>
          )}
        </CardContent>

        <CardFooter className="border-t border-gray-200 p-4">
          <Button
            onClick={handleProcessFile}
            disabled={!file || isProcessing}
            className="w-full bg-black hover:bg-gray-800 text-white disabled:bg-gray-300"
          >
            {isProcessing ? "Processing..." : "Process PDF"}
          </Button>
        </CardFooter>
      </Card>

      {/* Processing Tips */}
      <div className="text-xs text-gray-500 space-y-1">
        <p className="flex items-center">
          <CheckCircle className="w-3 h-3 mr-1 text-green-500" />
          Multiple processing methods ensure reliable text extraction
        </p>
        <p className="flex items-center">
          <Info className="w-3 h-3 mr-1 text-blue-500" />
          Text-based PDFs work better than scanned documents
        </p>
        <p className="flex items-center">
          <AlertTriangle className="w-3 h-3 mr-1 text-yellow-500" />
          Large files may take longer to process
        </p>
      </div>
    </div>
  )
}
